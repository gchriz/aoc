#!/usr/bin/env bash

#{

function help() {
    cat << EOF

aoc - a little helper tool for the "Advent of Code"

Usage:  aoc h|help         this help text
            l|ls|list [n]  list today's or given day's file(s)
            d|descr [n]    edit today's or given day's description file
            e|edit [n]     edit today's or given day's script(s)
            r|run [n]      run  today's or given day's script(s)
            t|test [n]     test today's or given day's script(s) with test-input
            p|pytest [n]   test today's or given day's script(s) via pytest
            i|ide|tmux     create a simple IDE with the help of tmux

EOF
}


function ideinfo() {
    cat <<EOF

I'm using 'aoc edit' in this window/pane here
and 'aoc run' in the window/pane bottom-right.

Unfortunately copy/pasting with tmux is a bit strange.
More infos later. Tip: Use fullscreen (prefix z) for copying.
The net has many reports mentioning this topic...

You might want to execute
    eval "\$(tmux showenv -gs HISTIGNORE)"
in every shell window first...

EOF
}


function fill_script_template() {
SCRIPT_TEMPLATE=$(cat <<EOF
#!/usr/bin/env python3
"""
Advent of Code. Puzzle ${day}
"""

import sys


def main():

    #lines = (line.rstrip() for line in sys.stdin)

    datafile = "day${day}-input"
    try:
        if sys.argv[1] == "-t":
            datafile = "day${day}-testinput"
    except IndexError:
        pass

    with open(datafile, "r") as f:
        lines = (line.rstrip() for line in f.readlines())

    #print(type(lines))   # <class 'generator'>

    print("todo...")


if __name__ == "__main__":
    main()

EOF
)
}


TEMPLATE_SCRIPT=day00.py

function prepare_template_script() {
   if [ ! -f $TEMPLATE_SCRIPT ] ; then
      echo "$SCRIPT_TEMPLATE" > $TEMPLATE_SCRIPT
   fi
}

function prepare_scripts() {
    for script in day${day}.py ; do
        # ... day${day}b.py ; do
        if [ ! -f $script ] ; then
           if [ -f $TEMPLATE_SCRIPT ] ; then
              cp $TEMPLATE_SCRIPT $script
           else
              echo "$SCRIPT_TEMPLATE" > $script
           fi
        fi
    done

    scripts=$(ls -1 day${day}.py day${day}.sh day${day}?.py day${day}?.sh 2>/dev/null)
    chmod u+x $scripts
}


function check_for_input() {
    if [ ! -f "$1" ] ; then
        echo "No input file '$1' found! Probably day ${day} has not been worked at."
        echo "Please download the user input and save it as file '$1' or"
        echo -e "paste the input data into the editor after pressing ENTER right now"
        read inp
        vim -c 'set paste | startinsert' $1
        return 1
    fi
}

function run_scripts() {
    #check_for_input $1 || return 1
    chmod u+x $scripts
    for script in $scripts ; do
        echo "--- $script"
        #./$script < "$1"
        ./$script $1
        echo ""
    done
}

function create_tmux_ide() {
    # put current directory into PATH to be able to execute aoc without ./
    #export PATH=.:$PATH
    # The following doesn't survive completely, because .bashc overwrites it on tmux's bash invocation below
    export HISTIGNORE="aoc*:vi aoc:${HISTIGNORE}"
    # but it ends in tmux's environmnt and can be eval'ed from there. See usage above.
    # Changing .bashrc to append to HISTIGNORE instead of setting it would help, but double HISTIGORE on every invocation...

    tmux has-session -t AOC 2>/dev/null
    if [ $? -ne 0 ] ; then
        tmux new-session -d -s AOC
        # Split window into 4 identical panes.
        #
        ## Start with a horizontal split to be able
        ## to more comfortable resize panes later.
        #tmux split-window -t 1 -h -d
        #tmux split-window -t 1 -v -d
        #tmux split-window -t 3 -v -d

        # Start with a vertical split to be able
        # to more comfortable resize panes later.
        tmux split-window -t 1 -v -d
        tmux split-window -t 1 -h -d
        tmux split-window -t 3 -h -d

        # I'm starting several programs within the pane(s).
        # That can be done via direct call from tmux
        # but would close the pane after the program ends.
        # Since I would like the panes to retain after exiting
        # the individual program tmux just send the keys to
        # the shell to start the programs.
        # After exiting them the shell remains open.

        # There is an optional leading space in the sent commands
        # to make them NOT stored in Bash history.
        # If configured so there...
        tmux send-keys -t 1 " aoc H" ENTER

        # The following pane at the bottom/left contains the puzzle description.
        #
        if [ -f day${day}.txt ] ; then
            # Scrolling a longer output text within a tmux pane can be
            # done with different means.
            #
            # 1. There is tmux' own buffering (Copy-mode)
            #    Usable via keyboard
            # 2. There might be a tmux configuration to do that
            #    scrolling in tmux' buffer via mouse wheel
            # 3. Any scrolling mechanism of the called command:
            #    e.g. 'less'
            #    including mouse wheel if possible.
            #
            # I can't decide yet what version I prefer...
            # but since 'less' knows about the mouse-wheel,
            # that might be the way to go.
            #
            # Output via 'cat' makes it possible to scroll via
            # tmux copy mode keystrokes or mouse wheel, if configured
            #tmux send-keys -t 1 " cat day${day}.txt" ENTER
            # or:
            # Output via 'less' makes it possible to scroll via "normal" keystroke
            tmux send-keys -t 3 " less -m --mouse day${day}.txt" ENTER
        else
            tmux send-keys -t 3 " vi day${day}.txt" ENTER
        fi
        tmux send-keys -t 2 " aoc ls ${day}" ENTER
        tmux send-keys -t 4 " python3" ENTER
        #tmux new-window -d vi day${day}.txt
        # wait a moment to avoid a vim (etc.) bug(?) not receiving WINCH signal correctly
        sleep 0.1
    fi
    tmux attach -t AOC
}

#===========================================================================
#set -x
#TODO: How to make it automatic?
#export HISTIGNORE="aoc*:vi aoc:${HISTIGNORE}"
## now in 'cdp'
#export PATH=.:$PATH

# this happens if called from cdp as '. aoc' , but why????
if [ "$1" == "." -o "$1" == "source" ] ; then
    help
    return
fi

if [ "$0" == "/bin/bash" ] ; then
    help
    return
fi
#echo "0 = $0"

if [ "$#" -eq 0 ] ; then
    help
    exit 1
fi

if [ -z "$2" ] ; then
    day=$(date +'%d')
else
    # leading zeros are eliminated from input (due to octal system trap...)
    # but there is no additional error checking yet (1..24, no-number etc.)
    printf -v day "%02i" ${2##*0}
    #day=$2
fi

fill_script_template
prepare_template_script
prepare_scripts

case "$1" in
    i|ide|tmux) if [[ ! $(type -P tmux) ]] ; then
                    echo "tmux doesn't seem to be installed!"
                    echo "Can't create the IDE..."
                else
                    create_tmux_ide
                fi
                ;;
    l|ls|list)  echo "Files for day ${day}:"
                ls -l day${day}*
                ;;
    r|run)      run_scripts day${day}-input
                ;;
    t|test)     run_scripts # -t # day${day}${3}-testinput
                ;;
    e|edit)     vim -p $scripts
                ;;
    d|descr)    vim day${day}.txt
                ;;
    p|pytest)   pytest $scripts
                ;;
    h|help)     help
                ;;
          H)    help
                ideinfo
                ;;
esac

#exit;
#}
